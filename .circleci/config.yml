version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:




  destroy_environment:
    parameters:
      workflowID:
        type: string  
    steps:
      - run:
          name: Destroy environment if any fail 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-<<parameters.workflowID>> --recursive

  revert-migrations:
    parameters:
      workflowID:
        type: string 
    steps:
     - run:
        name: rollback migrations
        when: on_fail
        command: |
  
          SUCCESS=$(curl --insecure  https://kvdb.io/9eWq6mr43bWdShCSd8khW5/migration_<< parameters.workflowID >>)
          if(( $SUCCESS==1 )); 
          then
            cd ~/project/backend
            npm install
            npm run migration:revert
          fi


jobs:
# FRONTEND
  Build-Frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: "Build front-end"
          command: |
            cd frontend/
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
            name: "Test Frontend"
            command: |
              cd frontend
              npm install
              npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
            name: "Scan Frontend"
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

#BACKEND

  Build-Backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Build Back-end"
          command: |
            cd backend/
            npm install
            npm run build  
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/dist]
          key: backend-dist
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Test Backend"
          command: |
            cd backend
            npm install
            npm run test
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
            name: "Scan backend"
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

#CD Part
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: "install Tar"
          command: yum install -y tar gzip
      - run:
          name: Create Back-end Infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: creating Front-End infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Fetch the public IP of  EC2  and append it to inventory
          command: |
            BE_IP=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BE_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}              
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt


  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
        environment:
            ANSIBLE_HOST_KEY_CHECKING: "no"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["12:76:e5:bd:f0:94:9b:22:b5:40:66:e4:f1:61:6d:1e"]

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli

  

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}  
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install aws dependencies
          command: |
            sudo apt update && sudo apt install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then 
              echo "has been done successfully"
              curl -k https://kvdb.io/9eWq6mr43bWdShCSd8khW5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "has failed"
              curl -k https://kvdb.io/9eWq6mr43bWdShCSd8khW5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
              
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}  


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 

      - attach_workspace:
          at: ~/

      - run: 
          name: Install AwsCLI
          command: |
            sudo apt update && sudo apt install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
          
      - run:
          name: Get backend url
          command: |
            export BE_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            
            export API_URL="http://${BE_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BE_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}    
     
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}    
  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["12:76:e5:bd:f0:94:9b:22:b5:40:66:e4:f1:61:6d:1e"]


      - attach_workspace:
          at: ~/

      - run: 
          name: Install AwsCLI
          command: |
            sudo apt update && sudo apt install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm tar gzip

   
      - run:
          name: prepare backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .

 
      - run:
          name: deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}      

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Fetch the backend IP and Start Smoke-test on BE
          command: |
            sleep 60
            export BE_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BE_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0 
            else
              return 1
            fi 
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi 


      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}    
     
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}   

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/

      - run:
          name: Update cloudfront distribution
          command: |
            OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            curl -k https://kvdb.io/9eWq6mr43bWdShCSd8khW5/old_workflow_id  -d $OldWorkflowID
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workfolw Id:"${CIRCLE_WORKFLOW_ID:0:7}" 
           
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}    
     
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            OldWorkflowID=$(curl --insecure  https://kvdb.io/9eWq6mr43bWdShCSd8khW5/old_workflow_id)
            export stacks=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo ${stacks}
            echo ${OldWorkflowID}
            echo ${CIRCLE_WORKFLOW_ID:0:7}
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              then
                if [[ "${stacks}"  != 0 ]]
                then
                  echo "cleanup is required"
                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                else
                  echo 'cleanup is not applicable'
                fi
              else  
                echo 'cleanup is not applicable'
              fi

workflows:
  default:
    jobs:
      - Build-Frontend
      - Build-Backend
      - test-frontend:
          requires: [Build-Frontend]
      - scan-frontend:
          requires: [Build-Frontend]
      - test-backend:
          requires: [Build-Backend]
      - scan-backend:
          requires: [Build-Backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure_infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure_infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]