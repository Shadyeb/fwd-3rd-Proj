version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3

jobs:
# FRONTEND
  Build-Frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: "Build front-end"
          command: |
            cd frontend/
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
            name: "Test Frontend"
            command: |
              cd frontend
              npm install
              npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
            name: "Scan Frontend"
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

#BACKEND

  Build-Backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Build Back-end"
          command: |
            cd backend/
            npm install
            npm run build  
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Test Backend"
          command: |
            cd backend
            npm install
            npm run test
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
            name: "Scan backend"
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

#CD Part
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: "install Tar"
          command: yum install -y tar gzip
      - run:
          name: Create Back-end Infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: creating Front-End infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Fetch the public IP of  EC2  and append it to inventory
          command: |
            backend-ip=$(aws ec2 describe-instances \ 
            --filters "Name=teg:Name,Values=Back-End-${CIRCLE_WORKFLOW_ID:0:7}" \ 
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $backend-ip >> .circleci/ansiable/inventory.txt
            cat .circleci/ansiable/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - fwd-3rd-Proj/.circleci/ansible/inventory.txt


workflows:
  default:
    jobs:
      # - Build-Frontend
      # - Build-Backend
      # - test-frontend:
      #     requires: [Build-Frontend]
      # - scan-frontend:
      #     requires: [Build-Frontend]
      # - test-backend:
      #     requires: [Build-Backend]
      # - scan-backend:
      #     requires: [Build-Backend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master

