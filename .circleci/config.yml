version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:

  install_awscli:
    steps:
      - run: install AWS-cli
      - command: |
       

  
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>

  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
# FRONTEND
  Build-Frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: "Build front-end"
          command: |
            cd frontend/
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
            name: "Test Frontend"
            command: |
              cd frontend
              npm install
              npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
            name: "Scan Frontend"
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

#BACKEND

  Build-Backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Build Back-end"
          command: |
            cd backend/
            npm install
            npm run build  
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Test Backend"
          command: |
            cd backend
            npm install
            npm run test
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
            name: "Scan backend"
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

#CD Part
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: "install Tar"
          command: yum install -y tar gzip
      - run:
          name: Create Back-end Infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: creating Front-End infra
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Fetch the public IP of  EC2  and append it to inventory
          command: |
            BE_IP=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BE_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      
      - destroy_environment
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["12:76:e5:bd:f0:94:9b:22:b5:40:66:e4:f1:61:6d:1e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install AwsCLI
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run: 
          name: upgrade openssh
          command: |
            apk add --upgrade bash ansible openssh-client
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment
  
  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install AwsCLI
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl https://kvdb.io/9eWq6mr43bWdShCSd8khW5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy_environment

workflows:
  default:
    jobs:
      - Build-Frontend
      - Build-Backend
      - test-frontend:
          requires: [Build-Frontend]
      - scan-frontend:
          requires: [Build-Frontend]
      - test-backend:
          requires: [Build-Backend]
      - scan-backend:
          requires: [Build-Backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure_infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure_infrastructure]

